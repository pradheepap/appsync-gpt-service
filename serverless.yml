service: appsync-gpt-service

plugins:
  - serverless-appsync-plugin
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs18.x
  profile: okta
  stage: dev
  region: us-east-1
  environment:
    APPSYNC_ID: ${appsync:id}
    APPSYNC_ARN: ${appsync:arn}
    APPSYNC_URL: ${appsync:url}
    APPSYNC_API_KEY: ${appsync:apiKey.AppSync_Bedrock_API_Key}

# you can add statements to the Lambda function's IAM Role here
#  iam:
#    role:
#      statements:
#        - Effect: "Allow"
#          Action:
#            - "s3:ListBucket"
#          Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#        - Effect: "Allow"
#          Action:
#            - "s3:PutObject"
#          Resource:
#            Fn::Join:
#              - ""
#              - - "arn:aws:s3:::"
#                - "Ref" : "ServerlessDeploymentBucket"
#                - "/*"

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

functions:
  getUser:
    handler: handler.getUser
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2:


# AppSync Config
appSync:
  name: appsync-bedrock-api
  schema:
    - 'schema/schema.graphql'
  authentication:
    type: API_KEY
  apiKeys:
    - name: AppSync_Bedrock_API_Key
  dataSources:
    bedrockapiDS:
      type: 'HTTP'
      config:
        endpoint: https://bedrock-runtime.${self:provider.region}.amazonaws.com/
        serviceRoleArn: !GetAtt BedrockDataSourceRole.Arn
        authorizationConfig:
          authorizationType: AWS_IAM
          awsIamConfig:
            signingRegion: !Ref AWS::Region
            signingServiceName: bedrock
  pipelineFunctions:
    invokeModelInlineResolver:
      dataSource: bedrockapiDS
      code: invokeModelInlineResolver.js
  resolvers:
    Mutation.invokeModel:
      functions:
          - invokeModelInlineResolver
      #      kind: UNIT
#      dataSource: bedrockapi
  #    code: invokeModelInlineResolver.js




# you can add CloudFormation resource templates here
resources:
  Description: "AWS AppSync GPT"
  Resources:
##########################################################################
#   AppSync Data Sources IAM Role                                        #
##########################################################################
    BedrockDataSourceRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: appsync.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: BedrockPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - bedrock:InvokeModel
                  Resource:
                    - '*'